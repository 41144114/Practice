int main(void)
{
	setupFlash();
	powerOn();
	setupPll();
	RCC->APB2ENR |= (1 << 11); // Подали питание на таймер
	//setupLight();

	setupGyroscope();
	setupSpi1();


	int whoAmI;
	int flag;
	int ctrlReg1;
	unsigned char temp;

	whoAmI = readGyroscopeRegister(0x0F);	//Read whoAmI
	writeGyroscopeRegister(0x20, 0x0F);
	ctrlReg1 = readGyroscopeRegister(0x20);
	temp = readGyroscopeRegister(0x22);
	temp |= (1 << 3); // Выставили DRDY
	writeGyroscopeRegister(0x22, temp);

	short Gx, Gy, Gz, temperature;

	for(;;)
	{
		if(GPIOE->IDR & 2)
		{
			temperature = 44 - readGyroscopeRegister(0x26);
			readGyroscopeData(&Gx, &Gy, &Gz);
		}
		//delay(1000);


	}

	for(;;)
	{

	}
}

void Tim1_Handler()
{
	GPIOE->ODR ^= (1 << 15); //Зажигаем светодиод или гасим, в зависимости от того...
	TIM1->SR &= ~1;
}







#include "stm32f3xx.h"

void delay(int durationCode)
{
	int flag = 0;
	while(flag < durationCode)
	{
		flag++;
		flag--;
		flag++;
	}
}

void powerOn()
{
	RCC->APB2ENR |= (1 << 12);	//Enable SPI1
	RCC->AHBENR |= ((1 << 17) | (1 << 21)); //Enable GPIOA & GPIOE
}

void setupFlash()
{
	FLASH->ACR &= ~7;	//Настроили flash-память на работу на частоте 72 МГц!!!!!!!!!	<--------
	FLASH->ACR |= 2;	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	<---------------
}

void setupPll()
{
	RCC->CR |= (5 << 16);	//HSE ON + HSE Bypass
	while(!(RCC->CR & (1 << 17)))
	{
	}


	RCC->CR &= ~(1 << 24);	//Disable PLL
	while(RCC->CR & (1 << 25))
	{
	}

	//change a desire parameter
	RCC->CFGR |= (1 << 16);	//Выбрали HSI/2 в качестве источника для PLL
	RCC->CFGR &= ~(0xF << 18);
	RCC->CFGR |= (0x7 << 18); //Установили мультиплексор на x16
	RCC->CFGR2 &= ~(0xF);


	RCC->CR |= (1 << 24);//Enable PLL again
	while( !(RCC->CR & (1 << 25)))
	{
	}


	RCC->CFGR &= ~3;	// Переключили свич на PLL
	RCC->CFGR |= 2;
}

void setupLight()
{
	GPIOE->MODER &= ~(0x3 << 30); //Устанавливает режим
	GPIOE->MODER |= (1 << 30);//Продолжение к прошлой строке

	NVIC->ISER[0] |= (1 << 25);
	TIM1->DIER |= 1;
	TIM1->ARR = 7999;	//Задали верхний предел счёта счётчика
	TIM1->PSC = 999;
	TIM1->CR1 |= 1; 	//Начали считать
}

void setupSpi1()
{
	GPIOA->MODER &= ~(63 << 10); //позатёрли то что было в этом регистре
	GPIOA->MODER |= ((1 << 11) | (1 << 13) | (1 << 15)); // Установили режим alternate function

	GPIOE->MODER &= ~(3 << 6);//позатёрли то что было в этом регистре
	GPIOE->MODER |= (1 << 6); // Установили режим out

	GPIOA->AFR[0] &= ~((0xF << 20) | (0xF << 24) | (0xF << 28));	//Почистили регистр описывающий alternate function для ног PA5, PA6, PA7
	GPIOA->AFR[0] |= (0x5 << 20) | (0x5 << 24) | (0x5 << 28);	//Установили AF5 как alternate function

	//SPI1->CR1 |= (1 << 2); //Set master
	//SPI1->CR1 |= (1 << 9);//set ssm  : Software slave management enabled

	/*SPI1->CR1 &= ~(7 << 3); // Baud rate control 1/16
	SPI1->CR1 |= (3 << 3);
	SPI1->CR1 |= (1 << 2); //Set master

	SPI1->CR1 |= (1 << 6);	//SPI1 enable*/

	SPI1->CR2 = 0x1700;//Настроили Control Register 2
	SPI1->CR1 = 0x357;//Настроили Control Register 1
	GPIOE->ODR |= (1 << 3);//Подняли чип селектор
}

void setupGyroscope()
{

}

unsigned char sendOneByteToGyroscope(unsigned char byte)
{
	while(!(SPI1->SR & 2))	//Ждём пока transmit buffer not empty
	{
	}

	*((unsigned char*)&SPI1->DR) = byte;

	while(!(SPI1->SR & 1))	//Ждём пока Receive buffer empty
	{
	}
	return SPI1->DR;
}

unsigned char readGyroscopeRegister(int addres)
{
	GPIOE->ODR &= ~(1 << 3);//опустили чип селектор
	unsigned char firstMsg = (addres | (1 << 7));
	unsigned char ret;
	sendOneByteToGyroscope(firstMsg);	//Задали режим чтения и адрес с которого нужно читать
	ret = sendOneByteToGyroscope(0x00);	//Отправили какой-то мусор, чтобы получить значение регистра
	GPIOE->ODR |= (1 << 3);//Подняли чип селектор

	return ret;
}

void writeGyroscopeRegister(int addres, unsigned char value)
{
	GPIOE->ODR &= ~(1 << 3);//опустили чип селектор
	sendOneByteToGyroscope(addres);	//Задали режим чтения и адрес с которого нужно читать
	sendOneByteToGyroscope(value);	//Отправили новое значение регистра
	GPIOE->ODR |= (1 << 3);//Подняли чип селектор
}

/*int readGyroscopeData(int addresH, int addresL)
{
	//Тут хорошо бы переделать, чтобы он всё вместе подряд читал с битом ms
	int ret;
	ret = readGyroscopeRegister(addresH);
	ret = (ret << 8);
	ret |= readGyroscopeRegister(addresL);
	return ret;
}*/

void readGyroscopeData(short* gx, short* gy, short* gz)
{
	GPIOE->ODR &= ~(1 << 3);//опустили чип селектор
	unsigned char firstMsg = (0x28 | (3 << 6));
	unsigned char temp;
	sendOneByteToGyroscope(firstMsg);	//Задали режим чтения и адрес с которого нужно читать
	temp = sendOneByteToGyroscope(0x00);	//Отправили какой-то мусор, чтобы получить значение регистра
	*gx = temp | (sendOneByteToGyroscope(0x00)<< 8);
	temp = sendOneByteToGyroscope(0x00);
	*gy = temp | (sendOneByteToGyroscope(0x00)<< 8);
	temp = sendOneByteToGyroscope(0x00);
	*gz = temp | (sendOneByteToGyroscope(0x00)<< 8);
	GPIOE->ODR |= (1 << 3);//Подняли чип селектор
}

